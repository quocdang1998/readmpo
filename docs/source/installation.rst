Installation
============

System requirements
-------------------

Prior to compiling the package, make sure that you have already installed these prerequisites:

-  C++ compiler: GNU ``g++>=11.2.0`` on **Linux** or Visual Studio 2022 ``cl.exe`` on **Windows**, with OpenMP enabled.

-  Cmake: ``cmake>=3.26.0``

-  Build-tool: GNU ``make`` on **Linux** or ``ninja`` on **Windows** (Ninja extenstion of MSVC).

To compile the Python interface by using the ``setup.py`` script, ensure the installation of the following modules:

-  |pybind11|_

-  |Numpy|_

.. |pybind11| replace:: ``pybind11``
.. _pybind11: https://pybind11.readthedocs.io/en/stable/
.. |Numpy| replace:: ``Numpy>1.17``
.. _Numpy: https://pypi.org/project/numpy/

.. code-block:: sh

      pip install -U numpy pybind11

To compile the documentation, install the following packages:

-  |Doxygen|_

-  |Sphinx|_ + extensions (|furo|_, |sphinx_design|_, |sphinxcontrib-bibtex|_, |breathe|_ and
   |sphinx_doxysummary|_)

   .. code-block:: sh

      pip install -U furo sphinx_design breathe sphinx_doxysummary
      pip install -U Sphinx

.. |Doxygen| replace:: ``Doxygen>=1.8.5``
.. _Doxygen: https://doxygen.nl/download.html
.. |Sphinx| replace:: ``Sphinx``
.. _Sphinx: https://www.sphinx-doc.org/en/master/
.. |furo| replace:: ``furo``
.. _furo: https://pypi.org/project/furo/
.. |sphinx_design| replace:: ``sphinx_design``
.. _sphinx_design: https://sphinx-design.readthedocs.io/en/latest/
.. |sphinxcontrib-bibtex| replace:: ``sphinxcontrib-bibtex``
.. _sphinxcontrib-bibtex: https://sphinxcontrib-bibtex.readthedocs.io/en/latest/
.. |breathe| replace:: ``breathe``
.. _breathe: https://breathe.readthedocs.io/en/latest/
.. |sphinx_doxysummary| replace:: ``sphinx_doxysummary``
.. _sphinx_doxysummary: https://doxysummary.readthedocs.io/en/latest/


Compilation and Installation
----------------------------

C++
^^^

On Linux, open a terminal and execute:

.. code-block:: sh

   mkdir build
   cd build
   make -j

On Windows, open a terminal and execute:

.. code-block:: powershell

   mkdir build
   cd build
   ninja

After the compilation step, executables, libraries and C++ header files can be
installed using CMake command (note that in the example below, current working
directory is the one containing ``cmake_install.cmake``, i.e. ``build``):

.. code-block:: sh

   cmake --install . --prefix="/path/to/install/folder"
   # or cmake --install . --prefix='C:\path\to\install folder' on Windows

Python package
^^^^^^^^^^^^^^

The Python interface is a wrapper around the C++ library. Therefore, prior to compiling the Python interface, verify
that **the C++ interface has been successfully compiled**.

When compiling the Python module "inplace" (compiled extensions are copied to the source directory), build dependancies
must be installed. Next, run the setup script with:

.. code-block:: sh

   python setup.py build_ext --inplace

The package can also be installed using ``pip``. If ``setuptools>=30``, the necessary build dependencies are
automatically installed during execution (in accordance with `PEP 517 <https://peps.python.org/pep-0517/>`_). Therefore
users are relieved from the obligation of manual pre-installation of these dependencies.

.. code-block:: sh

   pip install .


Build documentation
-------------------

The C++ documentation is generated by Doxygen and organized as XML files in the directory ``docs/source/xml``. Next,
``Sphinx`` conbines the C++ documentation and Python docstrings with RST files and creates a unified output, which
can be in the form of HTML or PDF.

.. code-block:: sh

   cd docs
   doxygen Doxyfile
   make html

.. note::

   In order to build the documentation, the Python interface must have already been built or installed, which requires
   the compilation of C++ library.
